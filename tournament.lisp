;;;
;;; added 17/12/12
;;; tournament selection
;;; alice 17/12/12
;;;


;; returns a list of (length population) parents generated by 
;; size tournament selection  
(defun tournament (population size)
  (tournament-aux population size nil))

;; makes sublists of length size of the population, sorts by fitness
;; and adds the last (most fit) member to the list of parents
;; until the parents list is the same length as the population list
(defun tournament-aux (population size parents)
  (cond ((= (length population) (length parents)) parents)
  (t (tournament-aux
	    population 
	    size 
	    (cons (last (sort-by-fitness (sublist size population))) parents)))))
	
      


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; STUFF THIS FUNCTION NEEDS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun sublist (n L)
  "returns a list containing n randomly selected elements of list L"
  (sublist-helper n nil L))

(defun sublist-helper (n new-list L)
  (cond ((= n 0) new-list)
	(t
	 (let ((element (nth (random (length L)) L)))
	   (sublist-helper (- n 1) 
			   (cons element new-list)
			   (remove-if #'(lambda (x) (equal x element)) L))))))

;; assuming each individual looks like ((bitstring) fitness)
;; returns a list of individuals sorted by fitness 
(defun sort-by-fitness (L)
  (sort L #'< :key #'second))
